//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include "opencv2/opencv.hpp"
#include <opencv2/core/core.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG; //MOG2 Background subtractor
int keyboard; //input from keyboard
void help();
int createBackground();
int createCharacter();
void processVideo(const char* backFile, const char* foreFile);
void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
                                                                                    << endl
    << "Usage:"                                                                     << endl
    << "./bs {-vid <video filename>|-img <image filename>}"                         << endl
    << "for example: ./bs -vid video.avi"                                           << endl
    << "or: ./bs -img /data/images/1.png"                                           << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}
int main()
{
    //print help information
	help();
	//createBackground();
	//createCharacter();
    //check for the input parameter correctness
    /*if(argc != 3) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }*/
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");

    //create Background Subtractor objects
    pMOG = createBackgroundSubtractorMOG(); //MOG2 approach

    processVideo("back.avi","fore.avi");
    /*if(strcmp(argv[1], "-vid") == 0) {
        //input data coming from a video
        processVideo(argv[2]);
    }
    else {
        //error in reading input parameters
        cerr <<"Please, check the input parameters." << endl;
        cerr <<"Exiting..." << endl;
        return EXIT_FAILURE;
    }*/
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}

int createBackground(){

	VideoCapture camera0(0); // Object to camera capturing by device zero.
	if( !camera0.isOpened() ) return 1; // Check if camera is ready.

	// Container to MJPEG codification as .avi video in 15 frames per second and 640 by 480 resolution.
	VideoWriter back("back.avi", VideoWriter::fourcc('M','J','P','G'), 15, Size(640, 480), true);
	Mat frame0; // Container for image.

	// Loop to build video
	int i=0;
	while(i<45) {

		camera0 >> frame0; // Put capture bytes inside the image container.
		imshow("im3", frame0); // Show current image of the video.
		back << frame0; // Put image inside video container.

		//Finish application by Esc key pressed.
		char ch =  waitKey(25);  // Wait for 25 ms for user to hit any key
		if(ch==27) break;  // If Escape Key was hit just exit the loop

		if(ch=='s' || ch=='S') // Save image if s was keyboard
		{
			imwrite("imgSaved.bmp", frame0);
		}
		i++;
	}
	destroyAllWindows();
	return 1;
}

int createCharacter(){

	VideoCapture camera0(0); // Object to camera capturing by device zero.
	if( !camera0.isOpened() ) return 1; // Check if camera is ready.

	// Container to MJPEG codification as .avi video in 15 frames per second and 640 by 480 resolution.
	VideoWriter fore("fore.avi", VideoWriter::fourcc('M','J','P','G'), 15, Size(640, 480), true);
	Mat frame0; // Container for image.

	// Loop to build video
	int i=0;
	while(i<45) {

		camera0 >> frame0; // Put capture bytes inside the image container.
		imshow("im3", frame0); // Show current image of the video.
		fore << frame0; // Put image inside video container.

		//Finish application by Esc key pressed.
		char ch =  waitKey(25);  // Wait for 25 ms for user to hit any key
		if(ch==27) break;  // If Escape Key was hit just exit the loop

		if(ch=='s' || ch=='S') // Save image if s was keyboard
		{
			imwrite("imgSaved.bmp", frame0);
		}
		i++;
	}
	destroyAllWindows();
	return 1;
}

void processVideo(const char* backFile, const char* foreFile) {
    //create the capture object
    VideoCapture foreCap(foreFile);
    VideoCapture backCap(backFile);
    VideoWriter video("final.avi", VideoWriter::fourcc('M','J','P','G'), 15, Size(640, 480), true);
    Mat background, character, bwChar, bwCharInv, bwFinal, bwFinalInv; // Container for image.

    if(!foreCap.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video file: " << foreFile << endl;
        exit(EXIT_FAILURE);
    }
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //read the current frame
        if(!foreCap.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }
        //update the background model
        pMOG->apply(frame, fgMaskMOG);
        //get the frame number and write it on the current frame
        stringstream ss;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        ss << foreCap.get(CAP_PROP_POS_FRAMES);
        string frameNumberString = ss.str();
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        
        //video << fgMaskMOG2;

        // create an image like frame but initialized to zeros
        //Mat colorForeground = Mat::zeros(frame.size(), frame.type());
        // copy color objects into the new image using mask
        //frame.copyTo(colorForeground, fgMaskMOG2);

        backCap >> background; // Put capture bytes inside the image container.
        //foreCap >> character;

        //cvtColor(character,bwChar,COLOR_BGR2GRAY);
        //threshold(bwChar, bwChar, 10, 255, THRESH_BINARY);
        bitwise_not(fgMaskMOG, bwCharInv);

        bitwise_and(fgMaskMOG, background, bwFinal);
        bitwise_and(bwCharInv, background, bwFinalInv);

        namedWindow( "bw", WINDOW_AUTOSIZE );
        imshow("bw", bwFinal); // Show current image of the video.
        //video << merged_frame; // Put image inside video container.
        namedWindow( "bwInv", WINDOW_AUTOSIZE );
        imshow("bwInv", bwFinalInv); // Show current image of the video.
        //video << merged_frame; // Put image inside video container.

        //namedWindow( "Frame", WINDOW_AUTOSIZE ); // Create a window for display.
		//imshow( "Frame", frame );
        //namedWindow( "FG Mask MOG 2", WINDOW_AUTOSIZE ); // Create a window for display.
		//imshow( "FG Mask MOG 2", fgMaskMOG2 );
        //namedWindow( "Color", WINDOW_AUTOSIZE ); // Create a window for display.
		//imshow( "Color", colorForeground );
        //get the input from the keyboard
        keyboard = waitKey( 30 );
    }

    //delete capture object
    foreCap.release();
    backCap.release();
    video.release();
}
